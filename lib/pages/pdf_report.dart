import 'package:pdf/widgets.dart' as pw;
import 'package:flutter/services.dart' show rootBundle;
import 'package:pdf/pdf.dart';

class PdfReport {
  static Future<pw.Document> build({
    required String itemName,
    required String tnved,
    required String company,
    required String senderCountry,
    required String receiverCountry,
    required String savedAtStr,
    required String displayPrice,
    required String displayDutyPercent, // % (—Å—Ç—Ä–æ–∫–æ–π)
    required String displayNdsPercent, // % (—Å—Ç—Ä–æ–∫–æ–π)
    required String displayFeePercent, // % (—Å—Ç—Ä–æ–∫–æ–π)
    required String resultText, // —Å—É–º–º–∞ –∏—Ç–æ–≥–æ–≤–∞—è
    required String dutySum, // —Å—É–º–º–∞ –ø–æ—à–ª–∏–Ω—ã
    required String ndsSum, // —Å—É–º–º–∞ –ù–î–°
    required String feeSum, // —Å—É–º–º–∞ —Å–±–æ—Ä–∞
    required String currency,
  }) async {
    final font = pw.Font.ttf(
      await rootBundle.load('assets/fonts/Nunito-Regular.ttf'),
    );
    final boldFont = pw.Font.ttf(
      await rootBundle.load('assets/fonts/Nunito-SemiBold.ttf'),
    );

    final pdf = pw.Document();

    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.a4.copyWith(
          marginBottom: 24,
          marginTop: 24,
          marginLeft: 24,
          marginRight: 24,
        ),
        build: (context) {
          return pw.Container(
            width: double.infinity,
            color: PdfColors.white, // ‚úÖ –±–µ–ª—ã–π —Ñ–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                pw.Text(
                  '–û—Ç—á–µ—Ç',
                  style: pw.TextStyle(
                    font: boldFont,
                    fontSize: 26,
                    color: PdfColor.fromInt(0xFFFFA500), // –æ—Ä–∞–Ω–∂–µ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç
                  ),
                ),
                pw.SizedBox(height: 20),

                // –ü–µ—Ä–≤—ã–π –±–ª–æ–∫
                _pdfBox([
                  _pdfRow('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:', itemName, font, boldFont),
                  _pdfRow('–¢–ù–í–≠–î –∫–æ–¥:', tnved, font, boldFont),
                  _pdfRow('–ò–º—è/–ö–æ–º–ø–∞–Ω–∏—è:', company, font, boldFont),
                  _pdfRow('–°—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', senderCountry, font, boldFont),
                  _pdfRow(
                    '–°—Ç—Ä–∞–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—å:',
                    receiverCountry,
                    font,
                    boldFont,
                  ),
                  _pdfRow('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', savedAtStr, font, boldFont),
                ]),

                pw.SizedBox(height: 14),

                // –í—Ç–æ—Ä–æ–π –±–ª–æ–∫ (–ò—Ç–æ–≥–æ)
                _pdfBox([
                  _pdfRow(
                    '–°—Ç–æ–∏–º–æ—Å—Ç—å:',
                    '$displayPrice $currency',
                    font,
                    boldFont,
                  ),
                  _pdfRow('–ü–æ—à–ª–∏–Ω–∞:', '$displayDutyPercent %', font, boldFont),
                  _pdfRow('–ù–î–°:', '$displayNdsPercent %', font, boldFont),
                  _pdfRow(
                    '–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä:',
                    '$displayFeePercent %',
                    font,
                    boldFont,
                  ),
                  pw.SizedBox(height: 10),
                  pw.Divider(color: PdfColors.orange, thickness: 1),
                  pw.SizedBox(height: 10),
                  _pdfRow('–ò—Ç–æ–≥–æ:', resultText, font, boldFont),
                ]),
              ],
            ),
          );
        },
      ),
    );

    return pdf;
  }
}

/// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä-–±–ª–æ–∫ —Å —Ä–∞–º–∫–æ–π (—Å–≤–µ—Ç–ª—ã–π —Å—Ç–∏–ª—å)
pw.Widget _pdfBox(List<pw.Widget> children) {
  return pw.Container(
    width: double.infinity,
    decoration: pw.BoxDecoration(
      color: PdfColor.fromInt(0xFFF9F9F9), // ‚úÖ —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –±–ª–æ–∫–∞
      border: pw.Border.all(
        color: PdfColor.fromInt(0xFFFFA500),
        width: 1,
      ), // –æ—Ä–∞–Ω–∂–µ–≤–∞—è —Ä–∞–º–∫–∞
      borderRadius: pw.BorderRadius.circular(12),
    ),
    padding: pw.EdgeInsets.all(14),
    child: pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: children,
    ),
  );
}

/// –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –æ—Ç—á–µ—Ç–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∑–Ω–∞—á–µ–Ω–∏–µ)
pw.Widget _pdfRow(String title, String value, pw.Font font, pw.Font boldFont) {
  return pw.Padding(
    padding: pw.EdgeInsets.symmetric(vertical: 4),
    child: pw.Row(
      children: [
        pw.Expanded(
          child: pw.Text(
            title,
            style: pw.TextStyle(
              font: font,
              color: PdfColor.fromInt(0xFF444444), // —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
              fontSize: 18,
            ),
          ),
        ),
        pw.Text(
          value,
          style: pw.TextStyle(
            font: boldFont,
            color: PdfColor.fromInt(0xFF222222), // –ø–æ—á—Ç–∏ —á–µ—Ä–Ω—ã–π
            fontSize: 18,
          ),
        ),
      ],
    ),
  );
}

class PdfReportData {
  final String itemName;
  final String tnved;
  final String company;
  final String senderCountry;
  final String receiverCountry;
  final String savedAtStr;
  final String displayPrice;
  final String displayDutyPercent;
  final String displayNdsPercent;
  final String displayFeePercent;
  final String resultText;
  final String dutySum;
  final String ndsSum;
  final String feeSum;
  final String currency; // üëà –¥–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞ –≤–∞–ª—é—Ç—É

  PdfReportData({
    required this.itemName,
    required this.tnved,
    required this.company,
    required this.senderCountry,
    required this.receiverCountry,
    required this.savedAtStr,
    required this.displayPrice,
    required this.displayDutyPercent,
    required this.displayNdsPercent,
    required this.displayFeePercent,
    required this.resultText,
    required this.dutySum,
    required this.ndsSum,
    required this.feeSum,
    required this.currency,
  });
}
