import 'package:pdf/widgets.dart' as pw;
import 'package:flutter/services.dart' show rootBundle;
import 'package:pdf/pdf.dart';

class PdfReport {
  static Future<pw.Document> build({
    required String itemName,
    required String tnved,
    required String company,
    required String senderCountry,
    required String receiverCountry,
    required String savedAtStr,
    required String displayPrice,
    required String displayDutyPercent, // % (—Å—Ç—Ä–æ–∫–æ–π)
    required String displayNdsPercent, // % (—Å—Ç—Ä–æ–∫–æ–π)
    required String displayFeePercent, // % (—Å—Ç—Ä–æ–∫–æ–π)
    required String resultText, // —Å—É–º–º–∞ –∏—Ç–æ–≥–æ–≤–∞—è
    required String dutySum, // —Å—É–º–º–∞ –ø–æ—à–ª–∏–Ω—ã
    required String ndsSum, // —Å—É–º–º–∞ –ù–î–°
    required String feeSum, // —Å—É–º–º–∞ —Å–±–æ—Ä–∞
  }) async {
    final font = pw.Font.ttf(
      await rootBundle.load('assets/fonts/Nunito-Regular.ttf'),
    );
    final boldFont = pw.Font.ttf(
      await rootBundle.load('assets/fonts/Nunito-SemiBold.ttf'),
    );

    final pdf = pw.Document();

    pdf.addPage(
      pw.Page(
        // üî• —É–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è
        pageFormat: PdfPageFormat.a4.copyWith(
          marginBottom: 0,
          marginTop: 0,
          marginLeft: 0,
          marginRight: 0,
        ),
        build: (context) {
          return pw.Container(
            width: double.infinity,
            height: double.infinity,
            color: PdfColor.fromInt(0xFF000000), // —Ñ–æ–Ω –Ω–∞ –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            padding: pw.EdgeInsets.all(24),
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                pw.Text(
                  '–û—Ç—á–µ—Ç',
                  style: pw.TextStyle(
                    font: boldFont,
                    fontSize: 26,
                    color: PdfColor.fromInt(0xFFFFA500),
                  ),
                ),
                pw.SizedBox(height: 20),

                // –ü–µ—Ä–≤—ã–π –±–ª–æ–∫
                _pdfBox([
                  _pdfRow('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', itemName, font, boldFont),
                  _pdfRow('–¢–ù–í–≠–î –∫–æ–¥', tnved, font, boldFont),
                  _pdfRow('–ò–º—è/–ö–æ–º–ø–∞–Ω–∏—è', company, font, boldFont),
                  _pdfRow('–°—Ç—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', senderCountry, font, boldFont),
                  _pdfRow('–°—Ç—Ä–∞–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—å', receiverCountry, font, boldFont),
                  _pdfRow('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ', savedAtStr, font, boldFont),
                ]),

                pw.SizedBox(height: 14),

                // –í—Ç–æ—Ä–æ–π –±–ª–æ–∫ (–ò—Ç–æ–≥–æ, —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç)
                _pdfBox([
                  pw.Text(
                    '–ò—Ç–æ–≥–æ',
                    style: pw.TextStyle(
                      font: boldFont,
                      fontSize: 18,
                      color: PdfColor.fromInt(0xFFFFA500),
                    ),
                  ),
                  pw.SizedBox(height: 10),
                  pw.Text(
                    '–ü–æ—à–ª–∏–Ω–∞: $dutySum —Å–æ–º',
                    style: pw.TextStyle(
                      font: font,
                      color: PdfColor.fromInt(0xFFFFFFFF),
                    ),
                  ),
                  pw.Text(
                    '–ù–î–°: $ndsSum —Å–æ–º',
                    style: pw.TextStyle(
                      font: font,
                      color: PdfColor.fromInt(0xFFFFFFFF),
                    ),
                  ),
                  pw.Text(
                    '–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä: $feeSum —Å–æ–º',
                    style: pw.TextStyle(
                      font: font,
                      color: PdfColor.fromInt(0xFFFFFFFF),
                    ),
                  ),
                  pw.SizedBox(height: 6),
                  pw.Text(
                    '----------------------',
                    style: pw.TextStyle(color: PdfColor.fromInt(0xFFFFA500)),
                  ),
                  pw.SizedBox(height: 6),
                  pw.Text(
                    '–ò—Ç–æ–≥–æ: $resultText —Å–æ–º',
                    style: pw.TextStyle(
                      font: boldFont,
                      fontSize: 16,
                      color: PdfColor.fromInt(0xFFFFFFFF),
                    ),
                  ),
                ]),

                pw.SizedBox(height: 14),

                // –¢—Ä–µ—Ç–∏–π –±–ª–æ–∫ (–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ %)
                _pdfBox([
                  _pdfRow('–°—Ç–æ–∏–º–æ—Å—Ç—å', '$displayPrice —Å–æ–º', font, boldFont),
                  _pdfRow('–ü–æ—à–ª–∏–Ω–∞', '$displayDutyPercent %', font, boldFont),
                  _pdfRow('–ù–î–°', '$displayNdsPercent %', font, boldFont),
                  _pdfRow(
                    '–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä',
                    '$displayFeePercent %',
                    font,
                    boldFont,
                  ),
                ]),
              ],
            ),
          );
        },
      ),
    );

    return pdf;
  }
}

/// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä-–±–ª–æ–∫ —Å —Ä–∞–º–∫–æ–π
pw.Widget _pdfBox(List<pw.Widget> children) {
  return pw.Container(
    decoration: pw.BoxDecoration(
      color: PdfColor.fromInt(0xFF212121),
      border: pw.Border.all(color: PdfColor.fromInt(0xFFFFA500), width: 1),
      borderRadius: pw.BorderRadius.circular(14),
    ),
    padding: pw.EdgeInsets.all(14),
    child: pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: children,
    ),
  );
}

/// –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –æ—Ç—á–µ—Ç–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∑–Ω–∞—á–µ–Ω–∏–µ)
pw.Widget _pdfRow(String title, String value, pw.Font font, pw.Font boldFont) {
  return pw.Padding(
    padding: pw.EdgeInsets.symmetric(vertical: 4),
    child: pw.Row(
      children: [
        pw.Expanded(
          child: pw.Text(
            title,
            style: pw.TextStyle(
              font: font,
              color: PdfColor.fromInt(0xFFBDBDBD),
              fontSize: 14,
            ),
          ),
        ),
        pw.Text(
          value,
          style: pw.TextStyle(
            font: boldFont,
            color: PdfColor.fromInt(0xFFFFFFFF),
            fontSize: 14,
          ),
        ),
      ],
    ),
  );
}
